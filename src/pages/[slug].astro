---
import { getCollection, render } from 'astro:content'

import PreviousNextLinks from '../components/PreviousNextLinks.astro'
import PostIntro from '../components/PostIntro.astro'
import BaseLayout from '../layouts/BaseLayout.astro'
import { slugifyPost, sortPosts } from '../utils'

export interface Props {
	data: {
		title: string
		date: string
		draft: boolean
		tags: string[]
	}
}

// I don’t know why Astro doesn’t recognise `post` as a property of `Astro.props`, but it is!
const { post, compiledContent } = Astro.props as any

const posts = await getCollection('posts')
const postsSorted = sortPosts(posts)
const postIndex = postsSorted.findIndex((p) => post.id === p.id)
const previous = postsSorted[postIndex + 1]
const next = postsSorted[postIndex - 1]

const title = post.data.title

// Generate a new path for every collection entry
export async function getStaticPaths() {
	const posts = await getCollection('posts')
	const postsSorted = sortPosts(posts)

	return postsSorted.map((post) => ({
		params: { slug: slugifyPost(post) },
		props: { post },
	}))
}

const isMdx = Boolean(!post.rendered?.html)
const MdContent = isMdx ? null : post.rendered.html
const MdxContent = isMdx ? (await render(post)).Content : Fragment

if (!MdContent && !MdxContent) {
	console.error('No Content rendered!', post)
}
---

<BaseLayout
	title={title + ' — Duncan Ritchie’s blog'}
	description={`Blogpost by Duncan Ritchie entitled “${title}”`}
	showBlogHomeLinkInFooter={true}
>
	<PostIntro data={post.data} />

	<main>
		{isMdx ? <MdxContent /> : <Fragment set:html={MdContent} />}
	</main>

	<PreviousNextLinks
		type="post"
		previous={previous?.data?.title}
		previousUrl={import.meta.env.BASE_URL + '/' + slugifyPost(previous)}
		next={next?.data?.title}
		nextUrl={import.meta.env.BASE_URL + '/' + slugifyPost(next)}
	/>
</BaseLayout>
