---
import { CollectionEntry, getCollection } from 'astro:content'
import BaseLayout from '../../layouts/BaseLayout.astro'
import { sortPosts } from '../../utils/'
import PostList from '../../components/PostList.astro'

// Generate a new path for every collection entry
export async function getStaticPaths() {
	const allPosts = await getCollection('posts')

	const allPostsSorted = sortPosts(allPosts)

	const years: Set<number> = new Set(
		allPostsSorted.map((post) => new Date(post.data.date).getFullYear()),
	)

	const yearsWithPosts: { [key: number]: CollectionEntry<'posts'>[] } = {}
	years.forEach(
		(year) =>
			(yearsWithPosts[year] = allPostsSorted.filter(
				(post) => year === new Date(post.data.date).getFullYear(),
			)),
	)

	return [...years].sort().map((year, index, years) => ({
		params: { slug: year },
		props: {
			year,
			posts: yearsWithPosts[year],
			previous: years[index - 1],
			next: years[index + 1],
		},
	}))
}

const { year, posts, previous, next } = Astro.props
---

<BaseLayout
	title={`Posts from ${year} — Duncan Ritchie’s blog`}
	description={`List of blogposts by Duncan Ritchie from ${year}`}
	showBlogHomeLinkInFooter={true}
>
	<main>
		<h1>Posts from {year}</h1>
		<PostList posts={posts} />
		<div class="links-to-adjacent-years">
			{
				previous && (
					<p class="previous">
						Previous year: <a href={'./' + previous}>{previous}</a>
					</p>
				)
			}
			{
				next && (
					<p class="next">
						Next year: <a href={'./' + next}>{next}</a>
					</p>
				)
			}
		</div>
	</main>
</BaseLayout>

<style>
	.links-to-adjacent-years {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 0.5rem;
		padding-inline: 1rem;
		margin-top: 2rem;
		border-top: 3px solid var(--colour6);
	}
	.previous {
		text-align: left;
		grid-column: 1 / 2;
	}
	.next {
		text-align: right;
		grid-column: 2 / 3;
	}
</style>
